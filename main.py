import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml.shared import OxmlElement, qn
from datetime import datetime
import os
import sys
from collections import defaultdict

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class MedicalReportGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("Gerador de Relat√≥rios FUSEX")
        self.root.geometry("900x700")
        
        # Configurar √≠cone se existir
        try:
            self.root.iconbitmap(resource_path("icone.ico"))
        except:
            pass  # Ignora se n√£o tiver √≠cone
        
        # Vari√°veis
        self.excel_file = None
        self.report_type = tk.StringVar(value="PNE")
        self.data = None
        
        self.setup_ui()
        
    def setup_ui(self):
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # T√≠tulo com estilo
        title_label = ttk.Label(main_frame, text="üè• Gerador de Relat√≥rios FUSEX", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 25))
        
        # Sele√ß√£o do tipo de relat√≥rio
        type_frame = ttk.LabelFrame(main_frame, text="üìã Tipo de Relat√≥rio", padding="15")
        type_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        
        ttk.Radiobutton(type_frame, text="üß© PNE (Portador de Necessidades Especiais)", 
                       variable=self.report_type, value="PNE").pack(anchor=tk.W, pady=5)
        ttk.Radiobutton(type_frame, text="üë§ T√≠pico", 
                       variable=self.report_type, value="TIPICO").pack(anchor=tk.W, pady=5)
        
        # Sele√ß√£o de arquivo
        file_frame = ttk.LabelFrame(main_frame, text="üìÅ Arquivo Excel", padding="15")
        file_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        
        # Frame interno para organizar melhor
        file_inner_frame = ttk.Frame(file_frame)
        file_inner_frame.pack(fill=tk.X)
        
        self.file_label = ttk.Label(file_inner_frame, text="Nenhum arquivo selecionado", 
                                   foreground="gray")
        self.file_label.pack(side=tk.LEFT, padx=(0, 15))
        
        # Bot√µes de arquivo
        btn_frame = ttk.Frame(file_inner_frame)
        btn_frame.pack(side=tk.RIGHT)
        
        ttk.Button(btn_frame, text="üìÅ Selecionar Arquivo", 
                  command=self.select_file).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üìÑ Usar Exemplo", 
                  command=self.load_example).pack(side=tk.LEFT)
        
        # Preview dos dados
        preview_frame = ttk.LabelFrame(main_frame, text="üëÅÔ∏è Preview dos Dados", padding="15")
        preview_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 15))
        
        # Treeview para mostrar os dados
        columns = ("Nome", "Data Nascimento", "Respons√°vel", "Especialidade", "M√™s Refer√™ncia")
        self.tree = ttk.Treeview(preview_frame, columns=columns, show="headings", height=12)
        
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150)
        
        scrollbar_v = ttk.Scrollbar(preview_frame, orient=tk.VERTICAL, command=self.tree.yview)
        scrollbar_h = ttk.Scrollbar(preview_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)
        
        self.tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_v.grid(row=0, column=1, sticky=(tk.N, tk.S))
        scrollbar_h.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        preview_frame.grid_rowconfigure(0, weight=1)
        preview_frame.grid_columnconfigure(0, weight=1)
        
        # Bot√µes de a√ß√£o
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=3, pady=(15, 0))
        
        ttk.Button(button_frame, text="üöÄ Gerar Relat√≥rios", 
                  command=self.generate_reports).pack(side=tk.LEFT, padx=(0, 15))
        ttk.Button(button_frame, text="üóëÔ∏è Limpar", 
                  command=self.clear_data).pack(side=tk.LEFT, padx=(0, 15))
        ttk.Button(button_frame, text="‚ùì Ajuda", 
                  command=self.show_help).pack(side=tk.LEFT)
        
        # Status bar
        self.status_var = tk.StringVar(value="‚úÖ Pronto para uso")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W, padding="5")
        status_bar.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(15, 0))
        
        # Configurar redimensionamento
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(3, weight=1)
    
    def load_example(self):
        """Carrega o arquivo de exemplo fusex_tipico.xlsx"""
        try:
            example_file = resource_path("fusex_tipico.xlsx")
            if os.path.exists(example_file):
                self.excel_file = example_file
                self.data = pd.read_excel(example_file)
                
                # Verificar colunas
                required_columns = ['NOME', 'DATA DE NASCIMENTO', 'RESPONS√ÅVEL', 
                                  'ESPECIALIDADE', 'M√äS DE REFER√äNCIA']
                
                missing_columns = [col for col in required_columns if col not in self.data.columns]
                if missing_columns:
                    messagebox.showerror("Erro", f"Colunas obrigat√≥rias n√£o encontradas no exemplo: {', '.join(missing_columns)}")
                    return
                
                self.file_label.config(text="üìÑ fusex_tipico.xlsx (exemplo)", foreground="blue")
                self.load_preview()
                self.status_var.set(f"üìÑ Exemplo carregado: {len(self.data)} registros")
            else:
                messagebox.showerror("Erro", "Arquivo de exemplo n√£o encontrado!")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar exemplo: {str(e)}")
    
    def show_help(self):
        """Mostra janela de ajuda"""
        help_window = tk.Toplevel(self.root)
        help_window.title("Ajuda - Gerador de Relat√≥rios FUSEX")
        help_window.geometry("600x400")
        help_window.transient(self.root)
        help_window.grab_set()
        
        help_text = """
        üìã COMO USAR O GERADOR DE RELAT√ìRIOS FUSEX
        
        1Ô∏è‚É£ PREPARAR PLANILHA EXCEL:
           ‚Ä¢ Colunas obrigat√≥rias:
             - NOME
             - DATA DE NASCIMENTO
             - RESPONS√ÅVEL
             - ESPECIALIDADE
             - M√äS DE REFER√äNCIA
        
        2Ô∏è‚É£ SELECIONAR TIPO DE RELAT√ìRIO:
           ‚Ä¢ PNE: Para portadores de necessidades especiais
           ‚Ä¢ T√≠pico: Para desenvolvimento t√≠pico
        
        3Ô∏è‚É£ CARREGAR DADOS:
           ‚Ä¢ Use "Selecionar Arquivo" para sua planilha
           ‚Ä¢ Ou "Usar Exemplo" para testar
        
        4Ô∏è‚É£ GERAR RELAT√ìRIOS:
           ‚Ä¢ Clique em "Gerar Relat√≥rios"
           ‚Ä¢ Escolha pasta de destino
           ‚Ä¢ Aguarde o processamento
        
        ‚öôÔ∏è ESPECIALIDADES SUPORTADAS:
           ‚Ä¢ Terapia ABA
           ‚Ä¢ Psicoterapia
           ‚Ä¢ Terapia Ocupacional
           ‚Ä¢ Fonoaudiologia
           ‚Ä¢ Psicomotricidade
           ‚Ä¢ Psicopedagogia
        
        üìß SUPORTE: Qualquer d√∫vida, entre em contato!
        """
        
        text_widget = tk.Text(help_window, wrap=tk.WORD, padx=20, pady=20)
        text_widget.insert(tk.END, help_text)
        text_widget.config(state=tk.DISABLED)
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        ttk.Button(help_window, text="‚úÖ Entendi", 
                  command=help_window.destroy).pack(pady=10)
    
    def add_table_borders(self, table):
        """Adiciona bordas √† tabela de cabe√ßalho"""
        for row in table.rows:
            for cell in row.cells:
                tc = cell._tc
                tcPr = tc.get_or_add_tcPr()
                tcBorders = OxmlElement('w:tcBorders')
                
                for border_name in ['top', 'left', 'bottom', 'right']:
                    border = OxmlElement(f'w:{border_name}')
                    border.set(qn('w:val'), 'single')
                    border.set(qn('w:sz'), '4')
                    border.set(qn('w:space'), '0')
                    border.set(qn('w:color'), '000000')
                    tcBorders.append(border)
                
                tcPr.append(tcBorders)
    
    def create_header_table(self, doc, patient_data, convenio="FUSEX"):
        """Cria a tabela de cabe√ßalho padronizada"""
        table = doc.add_table(rows=6, cols=1)
        self.add_table_borders(table)
        
        especialidades_unicas = list(set(patient_data['especialidades']))
        especialidades_str = ", ".join(especialidades_unicas)
        
        header_data = [
            f"Nome: {patient_data['info']['nome']}",
            f"Data de Nascimento: {patient_data['info']['data_nascimento']}",
            f"Respons√°vel: {patient_data['info']['responsavel']}",
            f"Conv√™nio: {convenio}",
            f"Especialidade: {especialidades_str}",
            f"M√™s de refer√™ncia: {patient_data['info']['mes_referencia']}"
        ]
        
        for i, data in enumerate(header_data):
            cell = table.cell(i, 0)
            paragraph = cell.paragraphs[0]
            paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            if ':' in data:
                parts = data.split(':', 1)
                title_run = paragraph.add_run(parts[0] + ': ')
                title_run.bold = True
                paragraph.add_run(parts[1])
            else:
                run = paragraph.add_run(data)
                run.bold = True
        
        # Par√°grafo em branco simples para separar da pr√≥xima se√ß√£o
        doc.add_paragraph()
        return table
    
    def add_section_title(self, doc, title, space_before=Pt(24), space_after=Pt(12)):
        """Adiciona t√≠tulo de se√ß√£o padronizado"""
        p = doc.add_paragraph()
        fmt = p.paragraph_format
        fmt.space_before = space_before
        fmt.space_after = space_after
        p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
        run = p.add_run(title)
        run.bold = True
        return p
    
    def add_section_text(self, doc, text, space_before=Pt(12), space_after=Pt(12)):
        """Adiciona texto de se√ß√£o padronizado"""
        p = doc.add_paragraph(text)
        fmt = p.paragraph_format
        fmt.space_before = space_before
        fmt.space_after = space_after
        p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
        return p
    
    def add_specialty_section(self, doc, specialty_name, evolution_text, programming_text=None, is_evolution=True):
        """Adiciona se√ß√£o de especialidade (para relat√≥rios PNE)"""
        # T√≠tulo da especialidade
        if is_evolution:
            self.add_section_title(doc, specialty_name, Pt(18), Pt(8))
        else:
            self.add_section_title(doc, specialty_name, Pt(16), Pt(8))
        
        # Texto de evolu√ß√£o
        self.add_section_text(doc, evolution_text)
        
        # Se h√° texto de programa√ß√£o, adicionar tamb√©m
        if programming_text:
            self.add_section_text(doc, programming_text)
    
    def add_signature_section(self, doc, signature_type="tipico"):
        """Adiciona se√ß√£o de assinatura padronizada"""
        # Par√°grafo em branco para espa√ßamento antes da assinatura
        doc.add_paragraph()
        
        # Linha de assinatura
        p = doc.add_paragraph("_" * 50)
        fmt = p.paragraph_format
        fmt.space_before = Pt(24)
        fmt.space_after = Pt(6)
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        if signature_type == "pne":
            # Para relat√≥rios PNE
            resp_p = doc.add_paragraph("Respons√°vel t√©cnica(o)")
            resp_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        else:
            # Para relat√≥rios t√≠picos
            psico_p = doc.add_paragraph("Respons√°vel t√©cnica(o)")
            psico_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        return p
        
    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="Selecionar arquivo Excel",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        
        if file_path:
            try:
                self.excel_file = file_path
                self.data = pd.read_excel(file_path)
                
                # Verificar se tem as colunas necess√°rias
                required_columns = ['NOME', 'DATA DE NASCIMENTO', 'RESPONS√ÅVEL', 
                                  'ESPECIALIDADE', 'M√äS DE REFER√äNCIA']
                
                missing_columns = [col for col in required_columns if col not in self.data.columns]
                if missing_columns:
                    messagebox.showerror("Erro", f"Colunas obrigat√≥rias n√£o encontradas: {', '.join(missing_columns)}")
                    return
                
                self.file_label.config(text=f"üìÅ {os.path.basename(file_path)}", foreground="green")
                self.load_preview()
                self.status_var.set(f"üìä Arquivo carregado: {len(self.data)} registros")
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao carregar arquivo: {str(e)}")
    
    def load_preview(self):
        # Limpar dados anteriores
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Carregar novos dados
        for _, row in self.data.iterrows():
            # Formatar data de nascimento
            data_nasc = row['DATA DE NASCIMENTO']
            try:
                if pd.notna(data_nasc):
                    if hasattr(data_nasc, 'strftime'):
                        data_nasc = data_nasc.strftime('%d/%m/%Y')
                    else:
                        data_nasc = str(data_nasc)
                        if '/' in data_nasc:
                            data_nasc = data_nasc.split(' ')[0]
                else:
                    data_nasc = "Data n√£o informada"
            except:
                data_nasc = str(data_nasc) if pd.notna(data_nasc) else "Data n√£o informada"
            
            self.tree.insert("", tk.END, values=(
                str(row['NOME']) if pd.notna(row['NOME']) else "Nome n√£o informado",
                data_nasc,
                str(row['RESPONS√ÅVEL']) if pd.notna(row['RESPONS√ÅVEL']) else "N√£o informado",
                str(row['ESPECIALIDADE']) if pd.notna(row['ESPECIALIDADE']) else "N√£o informado",
                str(row['M√äS DE REFER√äNCIA']) if pd.notna(row['M√äS DE REFER√äNCIA']) else "N√£o informado"
            ))
    
    def clear_data(self):
        self.excel_file = None
        self.data = None
        self.file_label.config(text="Nenhum arquivo selecionado", foreground="gray")
        for item in self.tree.get_children():
            self.tree.delete(item)
        self.status_var.set("‚úÖ Pronto para uso")
    
    def generate_reports(self):
        if self.data is None:
            messagebox.showerror("Erro", "Nenhum arquivo carregado! Use 'Selecionar Arquivo' ou 'Usar Exemplo'.")
            return
        
        # Agrupar dados por paciente
        patient_data = defaultdict(lambda: {
            'info': {},
            'especialidades': []
        })
        
        for _, row in self.data.iterrows():
            nome = row['NOME']
            if not patient_data[nome]['info']:
                # Formatar data de nascimento
                data_nasc = row['DATA DE NASCIMENTO']
                try:
                    if pd.notna(data_nasc):
                        if hasattr(data_nasc, 'strftime'):
                            data_nasc = data_nasc.strftime('%d/%m/%Y')
                        else:
                            data_nasc = str(data_nasc)
                            if '/' in data_nasc:
                                data_nasc = data_nasc.split(' ')[0]
                    else:
                        data_nasc = "Data n√£o informada"
                except:
                    data_nasc = str(data_nasc) if pd.notna(data_nasc) else "Data n√£o informada"
                
                patient_data[nome]['info'] = {
                    'nome': str(row['NOME']),
                    'data_nascimento': data_nasc,
                    'responsavel': str(row['RESPONS√ÅVEL']) if pd.notna(row['RESPONS√ÅVEL']) else "N√£o informado",
                    'mes_referencia': str(row['M√äS DE REFER√äNCIA']) if pd.notna(row['M√äS DE REFER√äNCIA']) else "N√£o informado"
                }
            
            # Adicionar especialidade se n√£o for nula
            if pd.notna(row['ESPECIALIDADE']):
                patient_data[nome]['especialidades'].append(str(row['ESPECIALIDADE']))
        
        # Selecionar diret√≥rio de sa√≠da
        output_dir = filedialog.askdirectory(title="Selecionar pasta para salvar relat√≥rios")
        if not output_dir:
            return
        
        try:
            self.status_var.set("üîÑ Gerando relat√≥rios...")
            self.root.update()
            
            report_count = 0
            for nome, data in patient_data.items():
                if self.report_type.get() == "PNE":
                    self.generate_pne_report(data, output_dir)
                else:
                    self.generate_tipico_report(data, output_dir)
                report_count += 1
                
                # Atualizar progresso
                self.status_var.set(f"üîÑ Gerando... {report_count}/{len(patient_data)}")
                self.root.update()
            
            self.status_var.set(f"‚úÖ {report_count} relat√≥rios gerados com sucesso!")
            messagebox.showinfo("Sucesso! üéâ", 
                              f"‚úÖ {report_count} relat√≥rios gerados com sucesso!\n\n"
                              f"üìÅ Pasta: {output_dir}")
            
        except Exception as e:
            self.status_var.set("‚ùå Erro ao gerar relat√≥rios")
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rios: {str(e)}")
    
    def generate_pne_report(self, patient_data, output_dir):
        """Gera relat√≥rio PNE com espa√ßamento otimizado"""
        # Criar documento
        try:
            papel_timbrado = resource_path("papel timbrado.docx")
            doc = Document(papel_timbrado)
        except:
            doc = Document()
            # Cabe√ßalho b√°sico como papel timbrado
            header_p = doc.add_paragraph()
            header_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            run = header_p.add_run("CL√çNICA M√âDICA - PNE")
            run.bold = True
            run.font.size = Pt(16)
            # Par√°grafo em branco ap√≥s cabe√ßalho
            doc.add_paragraph()
        
        # Cabe√ßalho
        self.create_header_table(doc, patient_data, "Fusex PNE")
        
        # Hip√≥tese Diagn√≥stica
        self.add_section_title(doc, "Hip√≥tese Diagn√≥stica")
        self.add_section_text(doc, 
            "Transtorno do Espectro Autista, conforme crit√©rios do DSM-5. "
            "Apresentando preju√≠zos significativos na comunica√ß√£o social e "
            "comportamentos restritos e repetitivos, necessitando de apoio "
            "substancial em m√∫ltiplas √°reas do desenvolvimento.")
        
        # Verificar especialidades
        especialidades_encontradas = [esp.upper() for esp in patient_data['especialidades']]
        
        # Evolu√ß√£o por especialidade
        if any("ABA" in esp or "TERAPIA ABA" in esp for esp in especialidades_encontradas):
            self.add_specialty_section(doc, "Terapia ABA",
                "A paciente tem apresentado evolu√ß√£o gradual no manejo de "
                "comportamentos desafiadores e na aquisi√ß√£o de habilidades adaptativas. "
                "Destaca-se o progresso na capacidade de seguir instru√ß√µes, maior "
                "participa√ß√£o em atividades estruturadas e aumento da comunica√ß√£o "
                "funcional, com boa aceita√ß√£o aos programas propostos e resposta "
                "positiva ao refor√ßo positivo.", is_evolution=True)
        
        if any("PSICOTERAPIA" in esp for esp in especialidades_encontradas):
            self.add_specialty_section(doc, "Psicoterapia",
                "Observa-se maior abertura da paciente ao v√≠nculo terap√™utico, "
                "com avan√ßos na express√£o emocional, identifica√ß√£o de sentimentos "
                "e melhora na toler√¢ncia a frustra√ß√µes. H√° desenvolvimento de "
                "estrat√©gias internas de enfrentamento e maior consci√™ncia sobre "
                "suas pr√≥prias emo√ß√µes e comportamentos, adequadas √† sua faixa et√°ria.", is_evolution=True)
        
        if any("TERAPIA OCUPACIONAL" in esp or "OCUPACIONAL" in esp for esp in especialidades_encontradas):
            self.add_specialty_section(doc, "Terapia Ocupacional",
                "Houve progresso no desempenho ocupacional, especialmente nas "
                "√°reas de autorregula√ß√£o, coordena√ß√£o motora e autonomia nas "
                "atividades di√°rias. A paciente apresenta melhor organiza√ß√£o "
                "sensorial e maior engajamento em tarefas funcionais, tanto em "
                "contextos l√∫dicos quanto nas rotinas cotidianas.", is_evolution=True)
        
        if any("FONOAUDIOLOGIA" in esp or "FONO" in esp for esp in especialidades_encontradas):
            self.add_specialty_section(doc, "Fonoaudiologia",
                "Verifica-se avan√ßo significativo nas habilidades comunicativas, "
                "seja por meio da fala, linguagem alternativa ou recursos expressivos "
                "e receptivos. A paciente demonstra melhor compreens√£o de comandos, "
                "maior inten√ß√£o comunicativa e expans√£o do vocabul√°rio funcional, "
                "al√©m de avan√ßos na articula√ß√£o e flu√™ncia, conforme a necessidade individual.", is_evolution=True)
        
        if any("PSICOMOTRICIDADE" in esp or "PSICOMOTOR" in esp for esp in especialidades_encontradas):
            self.add_specialty_section(doc, "Psicomotricidade",
                "A evolu√ß√£o psicomotora inclui melhora na coordena√ß√£o global e fina, "
                "organiza√ß√£o espacial e equil√≠brio. A paciente demonstra maior "
                "consci√™ncia corporal e controle motor, com progressos que refletem "
                "positivamente no comportamento, na aten√ß√£o e na intera√ß√£o social "
                "durante as atividades terap√™uticas.", is_evolution=True)
        
        if any("PSICOPEDAGOGIA" in esp or "PEDAGOG" in esp for esp in especialidades_encontradas):
            self.add_specialty_section(doc, "Psicopedagogia",
                "A paciente apresentou melhora na aten√ß√£o, concentra√ß√£o e interesse "
                "por atividades que envolvem linguagem, racioc√≠nio l√≥gico e habilidades "
                "acad√™micas. Observa-se avan√ßo na mem√≥ria de trabalho, organiza√ß√£o do "
                "pensamento e capacidade de seguir sequ√™ncias, contribuindo para o "
                "desempenho escolar ou acad√™mico, conforme a faixa et√°ria.", is_evolution=True)
        
        # Programa√ß√£o Terap√™utica Atual
        self.add_section_title(doc, "Programa√ß√£o Terap√™utica Atual", Pt(30), Pt(12))
        
        # Programa√ß√£o por especialidade
        if any("ABA" in esp or "TERAPIA ABA" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Terapia ABA", Pt(16), Pt(8))
            self.add_section_text(doc,
                "A programa√ß√£o atual visa fortalecer comportamentos funcionais, "
                "ampliar a comunica√ß√£o, promover autonomia nas rotinas e reduzir "
                "comportamentos de oposi√ß√£o, fuga ou auto estimula√ß√£o. S√£o utilizados "
                "programas personalizados de ensino por tentativas discretas, ensino "
                "natural√≠stico e treino de habilidades sociais.")
        
        if any("PSICOTERAPIA" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Psicoterapia", Pt(16), Pt(8))
            self.add_section_text(doc,
                "Os objetivos terap√™uticos incluem promover o autoconhecimento, "
                "a regula√ß√£o emocional, o desenvolvimento da autoestima e o enfrentamento "
                "saud√°vel de desafios, utilizando abordagens adequadas √† idade "
                "(brincadeiras simb√≥licas, recursos visuais, t√©cnicas cognitivas, entre outras).")
        
        if any("TERAPIA OCUPACIONAL" in esp or "OCUPACIONAL" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Terapia Ocupacional", Pt(16), Pt(8))
            self.add_section_text(doc,
                "As interven√ß√µes atuais priorizam o desenvolvimento da independ√™ncia "
                "em atividades de vida di√°ria (AVDs), o planejamento motor e a integra√ß√£o "
                "sensorial. S√£o propostas atividades l√∫dicas e funcionais, com adapta√ß√µes "
                "conforme a faixa et√°ria, para favorecer o desempenho ocupacional global.")
        
        if any("FONOAUDIOLOGIA" in esp or "FONO" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Fonoaudiologia", Pt(16), Pt(8))
            self.add_section_text(doc,
                "O foco terap√™utico envolve o aperfei√ßoamento da linguagem oral e/ou "
                "alternativa, melhora na compreens√£o e express√£o verbal, bem como o "
                "desenvolvimento das habilidades fonol√≥gicas e comunicativas. A interven√ß√£o "
                "considera o n√≠vel atual de linguagem e o contexto escolar, familiar e social da paciente.")
        
        if any("PSICOMOTRICIDADE" in esp or "PSICOMOTOR" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Psicomotricidade", Pt(16), Pt(8))
            self.add_section_text(doc,
                "O trabalho psicomotor tem como meta promover o dom√≠nio do corpo no espa√ßo, "
                "controle postural, lateralidade e coordena√ß√£o em diferentes n√≠veis. As sess√µes "
                "envolvem jogos, circuitos e desafios motores com objetivos espec√≠ficos para "
                "aprimorar a integra√ß√£o sens√≥rio-motora.")
        
        if any("PSICOPEDAGOGIA" in esp or "PEDAGOG" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Psicopedagogia", Pt(16), Pt(8))
            self.add_section_text(doc,
                "A atua√ß√£o psicopedag√≥gica busca estimular habilidades cognitivas e acad√™micas, "
                "com estrat√©gias personalizadas para desenvolver leitura, escrita, l√≥gica "
                "matem√°tica e resolu√ß√£o de problemas. O plano tamb√©m inclui o fortalecimento "
                "da autoestima escolar e o apoio no planejamento e organiza√ß√£o do tempo.")
        
        # Considera√ß√µes Finais
        self.add_section_title(doc, "Considera√ß√µes Finais", Pt(30), Pt(12))
        self.add_section_text(doc,
            "A paciente segue em acompanhamento com evolu√ß√£o positiva. O trabalho "
            "conjunto entre as especialidades tem favorecido ganhos significativos e "
            "generaliza√ß√£o das habilidades desenvolvidas para diferentes ambientes. "
            "Recomendamos a continuidade do atendimento terap√™utico e o envolvimento "
            "da fam√≠lia e/ou escola no processo.")
        
        self.add_section_text(doc,
            "Nos colocamos √† disposi√ß√£o para esclarecimentos sobre o processo "
            "terap√™utico, bem como para oferecer orienta√ß√µes e suporte sempre que "
            "necess√°rio, respeitando os limites √©ticos da atua√ß√£o cl√≠nica.")
        
        # Assinatura
        self.add_signature_section(doc, "pne")
        
        # Salvar documento
        filename = f"Relat√≥rio_PNE_{patient_data['info']['nome'].replace(' ', '_')}.docx"
        filepath = os.path.join(output_dir, filename)
        doc.save(filepath)
    
    def generate_tipico_report(self, patient_data, output_dir):
        """Gera relat√≥rio T√≠pico com espa√ßamento otimizado"""
        # Criar documento
        try:
            papel_timbrado = resource_path("papel timbrado.docx")
            doc = Document(papel_timbrado)
        except:
            doc = Document()
            # Cabe√ßalho b√°sico como papel timbrado
            header_p = doc.add_paragraph()
            header_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            run = header_p.add_run("CL√çNICA M√âDICA")
            run.bold = True
            run.font.size = Pt(16)
            # Par√°grafo em branco ap√≥s cabe√ßalho
            doc.add_paragraph()
        
        # Cabe√ßalho
        self.create_header_table(doc, patient_data, "FUSEX")
        
        # Hip√≥tese Diagn√≥stica
        self.add_section_title(doc, "Hip√≥tese Diagn√≥stica")
        self.add_section_text(doc,
            "O paciente apresenta caracter√≠sticas compat√≠veis com o desenvolvimento "
            "t√≠pico, sem indica√ß√£o, at√© o momento, de transtornos diagnostic√°veis "
            "conforme os manuais classificat√≥rios vigentes (CID-11/DSM-5). As demandas "
            "observadas referem-se a dificuldades espec√≠ficas no enfrentamento de "
            "situa√ß√µes do cotidiano, que podem envolver aspectos emocionais, comportamentais "
            "ou relacionais, exigindo suporte terap√™utico para favorecer o desenvolvimento "
            "de habilidades adaptativas e funcionais. A avalia√ß√£o cl√≠nica sugere que, "
            "embora n√£o haja indicativos de psicopatologia, a interven√ß√£o √© pertinente "
            "para promo√ß√£o do bem-estar, preven√ß√£o de dificuldades futuras e apoio ao "
            "desenvolvimento global.")
        
        # Evolu√ß√£o
        self.add_section_title(doc, "Evolu√ß√£o")
        self.add_section_text(doc,
            "Desde o in√≠cio do acompanhamento, o(a) paciente tem demonstrado avan√ßos "
            "compat√≠veis com os objetivos terap√™uticos estabelecidos. Observa-se "
            "progressiva amplia√ß√£o da capacidade de express√£o emocional, melhor "
            "compreens√£o de situa√ß√µes internas e externas e maior toler√¢ncia a "
            "frustra√ß√µes e contrariedades. H√° ind√≠cios de fortalecimento do v√≠nculo "
            "terap√™utico, o que tem favorecido maior abertura para o di√°logo, "
            "elabora√ß√£o de viv√™ncias e desenvolvimento de estrat√©gias de enfrentamento. "
            "Em casos infantis, o uso de recursos l√∫dicos, hist√≥rias sociais e "
            "brincadeiras tem promovido maior engajamento e express√£o simb√≥lica. "
            "Para adolescentes e adultos, observa-se maior clareza na identifica√ß√£o "
            "de sentimentos e pensamento reflexivo sobre padr√µes de comportamento, "
            "rela√ß√µes interpessoais e tomada de decis√µes.")
        
        # Programa√ß√£o Terap√™utica Atual
        self.add_section_title(doc, "Programa√ß√£o Terap√™utica Atual")
        
        # Verificar se tem psicoterapia nas especialidades
        especialidades_encontradas = [esp.upper() for esp in patient_data['especialidades']]
        
        if any("PSICOTERAPIA" in esp.upper() for esp in patient_data['especialidades']):
            self.add_section_text(doc,
                "A psicoterapia segue com o objetivo de promover o autoconhecimento, "
                "fortalecer a autoestima e desenvolver recursos internos para lidar com "
                "desafios emocionais e comportamentais. S√£o utilizadas estrat√©gias adequadas "
                "√† faixa et√°ria, tais como: escuta ativa, ludoterapia, media√ß√£o simb√≥lica, "
                "reestrutura√ß√£o cognitiva, treino de habilidades sociais e t√©cnicas de "
                "regula√ß√£o emocional. A abordagem terap√™utica est√° centrada nas necessidades "
                "atuais do(a) paciente, com foco na constru√ß√£o de estrat√©gias saud√°veis "
                "para resolu√ß√£o de conflitos internos, desenvolvimento da autonomia emocional "
                "e aprimoramento das rela√ß√µes interpessoais. O processo psicoterap√™utico √© "
                "conduzido respeitando o ritmo individual, com observa√ß√£o cont√≠nua da evolu√ß√£o "
                "e ajustes nas interven√ß√µes conforme a resposta do(a) paciente.")
        
        if any("ABA" in esp or "TERAPIA ABA" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Terapia ABA", Pt(16), Pt(8))
            self.add_section_text(doc,
                "A programa√ß√£o atual visa fortalecer comportamentos funcionais, "
                "ampliar a comunica√ß√£o, promover autonomia nas rotinas e reduzir "
                "comportamentos de oposi√ß√£o, fuga ou auto estimula√ß√£o. S√£o utilizados "
                "programas personalizados de ensino por tentativas discretas, ensino "
                "natural√≠stico e treino de habilidades sociais.")
        
        if any("TERAPIA OCUPACIONAL" in esp or "OCUPACIONAL" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Terapia Ocupacional", Pt(16), Pt(8))
            self.add_section_text(doc,
                "As interven√ß√µes atuais priorizam o desenvolvimento da independ√™ncia "
                "em atividades de vida di√°ria (AVDs), o planejamento motor e a integra√ß√£o "
                "sensorial. S√£o propostas atividades l√∫dicas e funcionais, com adapta√ß√µes "
                "conforme a faixa et√°ria, para favorecer o desempenho ocupacional global.")
        
        if any("FONOAUDIOLOGIA" in esp or "FONO" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Fonoaudiologia", Pt(16), Pt(8))
            self.add_section_text(doc,
                "O foco terap√™utico envolve o aperfei√ßoamento da linguagem oral e/ou "
                "alternativa, melhora na compreens√£o e express√£o verbal, bem como o "
                "desenvolvimento das habilidades fonol√≥gicas e comunicativas. A interven√ß√£o "
                "considera o n√≠vel atual de linguagem e o contexto escolar, familiar e social da paciente.")
        
        if any("PSICOMOTRICIDADE" in esp or "PSICOMOTOR" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Psicomotricidade", Pt(16), Pt(8))
            self.add_section_text(doc,
                "O trabalho psicomotor tem como meta promover o dom√≠nio do corpo no espa√ßo, "
                "controle postural, lateralidade e coordena√ß√£o em diferentes n√≠veis. As sess√µes "
                "envolvem jogos, circuitos e desafios motores com objetivos espec√≠ficos para "
                "aprimorar a integra√ß√£o sens√≥rio-motora.")
        
        if any("PSICOPEDAGOGIA" in esp or "PEDAGOG" in esp for esp in especialidades_encontradas):
            self.add_section_title(doc, "Psicopedagogia", Pt(16), Pt(8))
            self.add_section_text(doc,
                "A atua√ß√£o psicopedag√≥gica busca estimular habilidades cognitivas e acad√™micas, "
                "com estrat√©gias personalizadas para desenvolver leitura, escrita, l√≥gica "
                "matem√°tica e resolu√ß√£o de problemas. O plano tamb√©m inclui o fortalecimento "
                "da autoestima escolar e o apoio no planejamento e organiza√ß√£o do tempo.")
        
        # Considera√ß√µes Finais
        self.add_section_title(doc, "Considera√ß√µes Finais")
        self.add_section_text(doc,
            "Recomenda-se a continuidade do processo terap√™utico, com participa√ß√£o "
            "ativa da fam√≠lia e alinhamento com a rede de apoio para promover a "
            "generaliza√ß√£o dos avan√ßos obtidos em consult√≥rio. A psicoterapia tem se "
            "mostrado um espa√ßo importante de escuta, acolhimento e constru√ß√£o de "
            "recursos para a promo√ß√£o da sa√∫de mental.")
        
        # Assinatura
        self.add_signature_section(doc, "tipico")
        
        # Salvar documento
        filename = f"Relat√≥rio_T√≠pico_{patient_data['info']['nome'].replace(' ', '_')}.docx"
        filepath = os.path.join(output_dir, filename)
        doc.save(filepath)

def main():
    root = tk.Tk()
    app = MedicalReportGenerator(root)
    root.mainloop()

if __name__ == "__main__":
    main()